// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonDirectory.Infrastructure.Data;

#nullable disable

namespace PersonDirectory.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PersonDirectory.Domain.Entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Georgia",
                            Name = "Tbilisi"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Georgia",
                            Name = "Batumi"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Georgia",
                            Name = "Kutaisi"
                        },
                        new
                        {
                            Id = 4,
                            Country = "Georgia",
                            Name = "Rustavi"
                        },
                        new
                        {
                            Id = 5,
                            Country = "Georgia",
                            Name = "Zugdidi"
                        });
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entity.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonalNumber")
                        .IsUnique();

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Luka",
                            Gender = 1,
                            ImagePath = "C://Users/Documents/Image",
                            LastName = "Matiashvili",
                            PersonalNumber = "01010101010"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            DateOfBirth = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Nino",
                            Gender = 2,
                            ImagePath = "C://Users/Documents/Image",
                            LastName = "Beridze",
                            PersonalNumber = "02020202020"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            DateOfBirth = new DateTime(1993, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Giorgi",
                            Gender = 1,
                            ImagePath = "C://Users/Documents/Image",
                            LastName = "Kiknavelidze",
                            PersonalNumber = "03030303030"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 4,
                            DateOfBirth = new DateTime(1994, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ana",
                            Gender = 2,
                            ImagePath = "C://Users/Documents/Image",
                            LastName = "Chikvaidze",
                            PersonalNumber = "04040404040"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 5,
                            DateOfBirth = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Dato",
                            Gender = 1,
                            ImagePath = "C://Users/Documents/Image",
                            LastName = "Gachechiladze",
                            PersonalNumber = "05050505050"
                        });
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entity.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entity.RelatedPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToPersonId")
                        .HasColumnType("int");

                    b.Property<int>("RelationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RelatedToPersonId");

                    b.ToTable("RelatedPersons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PersonId = 1,
                            RelatedToPersonId = 2,
                            RelationType = 5
                        },
                        new
                        {
                            Id = 2,
                            PersonId = 1,
                            RelatedToPersonId = 3,
                            RelationType = 6
                        },
                        new
                        {
                            Id = 3,
                            PersonId = 2,
                            RelatedToPersonId = 4,
                            RelationType = 4
                        },
                        new
                        {
                            Id = 4,
                            PersonId = 3,
                            RelatedToPersonId = 5,
                            RelationType = 7
                        },
                        new
                        {
                            Id = 5,
                            PersonId = 4,
                            RelatedToPersonId = 1,
                            RelationType = 5
                        });
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entity.Person", b =>
                {
                    b.HasOne("PersonDirectory.Domain.Entity.City", "City")
                        .WithMany("Persons")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entity.PhoneNumber", b =>
                {
                    b.HasOne("PersonDirectory.Domain.Entity.Person", "Person")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entity.RelatedPerson", b =>
                {
                    b.HasOne("PersonDirectory.Domain.Entity.Person", "Person")
                        .WithMany("RelatedPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonDirectory.Domain.Entity.Person", "RelatedToPerson")
                        .WithMany("RelatedToPersons")
                        .HasForeignKey("RelatedToPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("RelatedToPerson");
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entity.City", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("PersonDirectory.Domain.Entity.Person", b =>
                {
                    b.Navigation("PhoneNumbers");

                    b.Navigation("RelatedPersons");

                    b.Navigation("RelatedToPersons");
                });
#pragma warning restore 612, 618
        }
    }
}
